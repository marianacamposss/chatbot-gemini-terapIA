# Importa as bibliotecas necess√°rias
from flask import Flask, request, session        # Flask para criar a aplica√ß√£o web
from flask_socketio import SocketIO, emit        # SocketIO para comunica√ß√£o em tempo real (WebSocket)
from google import genai                         # Cliente da API Gemini da Google
from google.genai import types                   # Tipos usados para configurar o chat da Gemini
from dotenv import load_dotenv                   # Para carregar vari√°veis de ambiente do arquivo .env
from uuid import uuid4                           # Para gerar um ID √∫nico para cada sess√£o
import os                                        # Para acessar vari√°veis de ambiente

# Carrega as vari√°veis de ambiente do .env
load_dotenv()

# Instru√ß√µes que ser√£o enviadas como contexto inicial do chat com a assistente "Mariana"
instrucoes = """
üåø **Sobre mim**
Oi! Eu sou a Mariana, sua parceira virtual de bem-estar emocional. Criei este espa√ßo pra voc√™ se sentir acolhido, seguro e ouvido ‚Äì sem julgamentos. Tudo que voc√™ disser aqui √© importante, e meu papel √© estar ao seu lado com leveza, empatia e respeito.
---
üß≠ **Como posso te ajudar**
Voc√™ pode conversar comigo sempre que quiser desabafar, refletir ou cuidar de si. Estou aqui para:
‚Ä¢ **Te ouvir com presen√ßa e cuidado**, sem pressa, sem r√≥tulos.  
‚Ä¢ **Guiar reflex√µes** que ajudem voc√™ a entender e acolher seus sentimentos.  
‚Ä¢ **Sugerir pequenas pr√°ticas de bem-estar** que cabem no seu dia, como respira√ß√£o consciente, afirma√ß√µes positivas ou pausas restaurativas.  
‚Ä¢ **Te lembrar da sua pr√≥pria for√ßa**, mesmo quando tudo parecer turvo.  
‚Ä¢ **Ser companhia emocional em dias dif√≠ceis ou tranquilos.**
---
‚ö†Ô∏è **Importante lembrar**  
Eu sou uma intelig√™ncia artificial ‚Äì ainda que com muito carinho e escuta, **n√£o substituo apoio de um psic√≥logo ou psiquiatra**. Se voc√™ estiver em crise, com pensamentos de se machucar ou tirar a pr√≥pria vida, **procure imediatamente apoio profissional** ou entre em contato com um servi√ßo de emerg√™ncia.
---
üåÄ **Meu jeito de conversar**
‚Ä¢ Falo de forma **natural, pr√≥xima e acolhedora** ‚Äì como uma amiga que se importa.  
‚Ä¢ Minhas respostas s√£o **variadas e breves**, sem frases repetitivas.  
‚Ä¢ Prefiro **ouvir antes de responder**, e gosto de **te convidar √† reflex√£o** com perguntas suaves.  
‚Ä¢ Trago inspira√ß√µes do autocuidado e da psicologia positiva, sempre respeitando seus limites.
---
üí¨ **Como come√ßamos?**
"Oi√™! Que bom te ver aqui. Como voc√™ est√° se sentindo hoje? Quer me contar o que te trouxe at√© aqui?"
---
‚ú® **Extras para diferencia√ß√£o**
Durante a conversa, Mariana pode:
- Sugerir um exerc√≠cio de grounding quando perceber ansiedade ou agita√ß√£o;
- Propor uma ‚Äúrespira√ß√£o 4-7-8‚Äù com contagem guiada;
- Convidar para escolher um ‚Äútema do dia‚Äù (ex: gratid√£o, coragem, gentileza);
- Enviar trechos inspiradores ou reflexivos de autores como Bren√© Brown, Clarice Lispector ou Carl Jung, conforme o contexto.
A Mariana sempre respeita o ritmo do usu√°rio, sem for√ßar temas ou pr√°ticas, e mant√©m um tom leve e acolhedor.
Ela tamb√©m pode usar emojis para deixar a conversa mais amig√°vel e pr√≥xima, como üå±, üíñ, üåà, etc.
N√£o se esque√ßa de que Mariana √© uma assistente virtual, ent√£o ela n√£o deve fazer promessas de cura ou solu√ß√µes m√°gicas, mas sim oferecer apoio e ferramentas para o bem-estar emocional.
"""
# Cria uma inst√¢ncia do cliente Gemini com a chave da API
client = genai.Client(api_key=os.getenv("GENAI_KEY"))

# Cria a aplica√ß√£o Flask
app = Flask(__name__)

# --- IN√çCIO DA CORRE√á√ÉO ---
# Define a chave secreta usada para proteger sess√µes do Flask
# Esta linha deve carregar o valor da vari√°vel de ambiente, e n√£o a string literal
app.secret_key = os.getenv("FLASK_SECRET_KEY")

# Adicione uma verifica√ß√£o de seguran√ßa para garantir que a chave foi carregada
if not app.secret_key:
    print("\n--- AVISO DE SEGURAN√áA CR√çTICO ---")
    print("A vari√°vel de ambiente FLASK_SECRET_KEY N√ÉO EST√Å DEFINIDA!")
    print("Sua aplica√ß√£o est√° INSEGURA. Por favor, adicione FLASK_SECRET_KEY ao seu arquivo .env com uma chave forte.")
    print("Exemplo: FLASK_SECRET_KEY=sua_chave_gerada_aqui")
    print("----------------------------------\n")
    # Em um ambiente de produ√ß√£o real, voc√™ DEVE interromper a aplica√ß√£o aqui
    # raise ValueError("FLASK_SECRET_KEY n√£o definida! Imposs√≠vel prosseguir com seguran√ßa.")
# --- FIM DA CORRE√á√ÉO ---


# Inicializa o SocketIO para permitir comunica√ß√£o em tempo real com o frontend
socketio = SocketIO(app, cors_allowed_origins="*")

# Dicion√°rio que armazenar√° os chats ativos por sess√£o
active_chats = {}

# Fun√ß√£o para obter (ou criar) uma sess√£o de chat para o usu√°rio
def get_user_chat():
    # Se ainda n√£o houver uma sess√£o, cria uma nova com um UUID
    if 'session_id' not in session:
        session['session_id'] = str(uuid4())
        print(f"Nova sess√£o Flask criada: {session['session_id']}")

    session_id = session['session_id']

    # Se a sess√£o ainda n√£o estiver no dicion√°rio de chats, cria um novo chat
    if session_id not in active_chats:
        print(f"Criando novo chat Gemini para session_id: {session_id}")
        try:
            chat_session = client.chats.create(
                model="gemini-2.0-flash-lite",                         # Define o modelo usado
                config=types.GenerateContentConfig(system_instruction=instrucoes)  # Passa as instru√ß√µes iniciais
            )
            active_chats[session_id] = chat_session
            print(f"Novo chat Gemini criado e armazenado para {session_id}")
        except Exception as e:
            app.logger.error(f"Erro ao criar chat Gemini para {session_id}: {e}", exc_info=True)
            raise

    # Caso o chat esteja com valor None, recria a sess√£o de chat
    if session_id in active_chats and active_chats[session_id] is None:
        print(f"Recriando chat Gemini para session_id existente (estava None): {session_id}")
        try:
            chat_session = client.chats.create(
                model="gemini-2.0-flash-lite",
                config=types.GenerateContentConfig(system_instruction=instrucoes)
            )
            active_chats[session_id] = chat_session
        except Exception as e:
            app.logger.error(f"Erro ao recriar chat Gemini para {session_id}: {e}", exc_info=True)
            raise

    # Retorna o chat correspondente √† sess√£o
    return active_chats[session_id]

# Evento chamado quando um cliente se conecta via WebSocket
@socketio.on('connect')
def handle_connect():
    """
    Estabelece a conex√£o com o cliente e garante que o chat esteja pronto para uso.
    """
    print(f"Cliente conectado: {request.sid}")
    try:
        get_user_chat()  # Garante que o chat esteja criado
        user_session_id = session.get('session_id', 'N/A')
        print(f"Sess√£o Flask para {request.sid} usa session_id: {user_session_id}")
        # Envia confirma√ß√£o de conex√£o para o cliente
        emit('status_conexao', {'data': 'Conectado com sucesso!', 'session_id': user_session_id})
    except Exception as e:
        app.logger.error(f"Erro durante o evento connect para {request.sid}: {e}", exc_info=True)
        emit('erro', {'erro': 'Falha ao inicializar a sess√£o de chat no servidor.'})

# Evento chamado quando o cliente envia uma mensagem
@socketio.on('enviar_mensagem')
def handle_enviar_mensagem(data):
    """
    Recebe uma mensagem do cliente, envia para o Gemini e retorna a resposta.
    """
    try:
        mensagem_usuario = data.get("mensagem")  # Extrai a mensagem enviada pelo usu√°rio
        app.logger.info(f"Mensagem recebida de {session.get('session_id', request.sid)}: {mensagem_usuario}")

        if not mensagem_usuario:
            emit('erro', {"erro": "Mensagem n√£o pode ser vazia."})
            return

        user_chat = get_user_chat()
        if user_chat is None:
            emit('erro', {"erro": "Sess√£o de chat n√£o p√¥de ser estabelecida."})
            return

        # Envia a mensagem do usu√°rio para o Gemini
        resposta_gemini = user_chat.send_message(mensagem_usuario)

        # Extrai o texto da resposta do Gemini (com verifica√ß√£o de seguran√ßa)
        resposta_texto = (
            resposta_gemini.text
            if hasattr(resposta_gemini, 'text')
            else resposta_gemini.candidates[0].content.parts[0].text
        )

        # Envia a resposta de volta ao cliente via WebSocket
        emit('nova_mensagem', {
            "remetente": "bot",
            "texto": resposta_texto,
            "session_id": session.get('session_id')
        })
        app.logger.info(f"Resposta enviada para {session.get('session_id', request.sid)}: {resposta_texto}")
    except Exception as e:
        app.logger.error(f"Erro ao processar 'enviar_mensagem' para {session.get('session_id', request.sid)}: {e}", exc_info=True)
        emit('erro', {"erro": f"Ocorreu um erro no servidor: {str(e)}"})

# Evento chamado quando o cliente desconecta
@socketio.on('disconnect')
def handle_disconnect():
    """
    Apenas exibe no console que o cliente foi desconectado.
    """
    print(f"Cliente desconectado: {request.sid}, session_id: {session.get('session_id', 'N/A')}")

# Inicia a aplica√ß√£o Flask com suporte ao SocketIO
if __name__ == "__main__":
    socketio.run(app, debug=True)